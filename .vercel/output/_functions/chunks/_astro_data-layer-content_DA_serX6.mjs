const _astro_dataLayerContent = [["Map", 1, 2, 9, 10], "meta::meta", ["Map", 3, 4, 5, 6, 7, 8], "astro-version", "5.12.3", "content-config-digest", "dfb1f978632d078f", "astro-config-digest", '{"root":{},"srcDir":{},"publicDir":{},"outDir":{},"cacheDir":{},"site":"https://jorgerosbel.vercel.app","compressHTML":true,"base":"/","trailingSlash":"ignore","output":"server","scopedStyleStrategy":"attribute","build":{"format":"directory","client":{},"server":{},"assets":"_astro","serverEntry":"entry.mjs","redirects":false,"inlineStylesheets":"auto","concurrency":1},"server":{"open":false,"host":false,"port":4321,"streaming":true,"allowedHosts":[]},"redirects":{},"image":{"endpoint":{"route":"/_image"},"service":{"entrypoint":"astro/assets/services/sharp","config":{}},"domains":[],"remotePatterns":[],"responsiveStyles":false},"devToolbar":{"enabled":true},"markdown":{"syntaxHighlight":{"type":"shiki","excludeLangs":["math"]},"shikiConfig":{"langs":[],"langAlias":{},"theme":"github-dark","themes":{},"wrap":false,"transformers":[]},"remarkPlugins":[],"rehypePlugins":[],"remarkRehype":{},"gfm":true,"smartypants":true},"security":{"checkOrigin":true},"env":{"schema":{"BASE_URL":{"context":"server","access":"secret","type":"string"}},"validateSecrets":false},"experimental":{"clientPrerender":false,"contentIntellisense":false,"headingIdCompat":false,"preserveScriptOrder":false,"liveContentCollections":false,"csp":false,"rawEnvValues":false},"legacy":{"collections":false}}', "blog", ["Map", 11, 12, 53, 54, 117, 118], "introducing-novaboost-the-ultimate-astro-tailwindcss-blog-template", { id: 11, data: 13, body: 21, filePath: 22, digest: 23, rendered: 24 }, { title: 14, description: 15, pubDate: 16, tags: 17 }, "Introducing NovaBoost: The Ultimate Astro & TailwindCSS Blog Template", "Discover NovaBoost, a free, SEO‑optimized blog template built with Astro 5 and TailwindCSS, featuring JSON‑LD and optional AI-powered post generation.", ["Date", "2025-07-26T22:00:00.000Z"], [18, 19, 20], "astro", "seo", "blog-template", "# Introducing NovaBoost: The Ultimate Astro & TailwindCSS Blog Template\n\nIn the digital content era, having a fast, SEO-optimized, and easily customizable blog template is crucial. **NovaBoost** is an open-source solution that combines **Astro 5**, **TailwindCSS**, and AI technologies to offer a solid, modern starting point for any blog or content-driven website.\n\n### Key Features\n\n* **Astro 5**: Leverage the latest Astro release for ultra-fast builds and partial rendering.\n* **TailwindCSS**: Utility-first styling that accelerates the development of clean, responsive interfaces.\n* **SEO Optimization**: Preconfigured meta tags, sitemap, robots.txt, and best practices out of the box.\n* **JSON‑LD**: Structured data for articles, FAQs, breadcrumbs, and more, boosting search engine visibility.\n* **AI-powered Post Generation**: Optional CLI commands to auto-generate draft posts using the OpenAI API.\n* **Client-side Search**: Fuzzy search powered by Fuse.js and a prebuilt JSON index.\n* **Automatic Pagination**: Generated paginated routes to handle large volumes of content seamlessly.\n* **AI-friendly**: Includes a `/llms.txt` file for better interaction with AI crawlers and models.\n\n### Installation & Quick Start\n\n1. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/JorgeRosbel/NovaBoost.git\n   cd NovaBoost\n   ```\n2. **Install dependencies**\n\n   ```bash\n   npm install\n   ```\n3. **Start the development server**\n\n   ```bash\n   npm run dev\n   ```\n4. **Explore your blog**\n   Open `http://localhost:3000` to see NovaBoost in action.\n\n### Using AI-Powered Post Generation\n\nNovaBoost offers a convenient command to leverage OpenAI’s API for drafting articles:\n\n\nThis command creates a draft Markdown file in `/src/content`, ready for your review and customization.\n\n### Customization & Deployment\n\n* **Site Configuration**: Update `astro.config.mjs` with your domain, metadata, and any custom settings.\n* **Styles & Themes**: Tweak Tailwind utility classes in `src/styles` to match your brand’s look and feel.\n* **Deployment**: Seamlessly deploy to Vercel, Netlify, or any static hosting provider.\n\n### Conclusion\n\nNovaBoost is more than just a template—it’s a toolkit for launching a modern, efficient blog in minutes. With its modular structure and optional AI features, it’s perfect for both developers and content creators.\n\nContribute and learn more on GitHub: [NovaBoost](https://github.com/JorgeRosbel/NovaBoost)", "src/content/blog/introducing-novaboost-the-ultimate-astro-tailwindcss-blog-template.md", "b0ddb9de3624bac7", { html: 25, metadata: 26 }, '<h1 id="introducing-novaboost-the-ultimate-astro--tailwindcss-blog-template">Introducing NovaBoost: The Ultimate Astro &#x26; TailwindCSS Blog Template</h1>\n<p>In the digital content era, having a fast, SEO-optimized, and easily customizable blog template is crucial. <strong>NovaBoost</strong> is an open-source solution that combines <strong>Astro 5</strong>, <strong>TailwindCSS</strong>, and AI technologies to offer a solid, modern starting point for any blog or content-driven website.</p>\n<h3 id="key-features">Key Features</h3>\n<ul>\n<li><strong>Astro 5</strong>: Leverage the latest Astro release for ultra-fast builds and partial rendering.</li>\n<li><strong>TailwindCSS</strong>: Utility-first styling that accelerates the development of clean, responsive interfaces.</li>\n<li><strong>SEO Optimization</strong>: Preconfigured meta tags, sitemap, robots.txt, and best practices out of the box.</li>\n<li><strong>JSON‑LD</strong>: Structured data for articles, FAQs, breadcrumbs, and more, boosting search engine visibility.</li>\n<li><strong>AI-powered Post Generation</strong>: Optional CLI commands to auto-generate draft posts using the OpenAI API.</li>\n<li><strong>Client-side Search</strong>: Fuzzy search powered by Fuse.js and a prebuilt JSON index.</li>\n<li><strong>Automatic Pagination</strong>: Generated paginated routes to handle large volumes of content seamlessly.</li>\n<li><strong>AI-friendly</strong>: Includes a <code>/llms.txt</code> file for better interaction with AI crawlers and models.</li>\n</ul>\n<h3 id="installation--quick-start">Installation &#x26; Quick Start</h3>\n<ol>\n<li>\n<p><strong>Clone the repository</strong></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="bash"><code><span class="line"><span style="color:#B392F0">git</span><span style="color:#9ECBFF"> clone</span><span style="color:#9ECBFF"> https://github.com/JorgeRosbel/NovaBoost.git</span></span>\n<span class="line"><span style="color:#79B8FF">cd</span><span style="color:#9ECBFF"> NovaBoost</span></span></code></pre>\n</li>\n<li>\n<p><strong>Install dependencies</strong></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="bash"><code><span class="line"><span style="color:#B392F0">npm</span><span style="color:#9ECBFF"> install</span></span></code></pre>\n</li>\n<li>\n<p><strong>Start the development server</strong></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="bash"><code><span class="line"><span style="color:#B392F0">npm</span><span style="color:#9ECBFF"> run</span><span style="color:#9ECBFF"> dev</span></span></code></pre>\n</li>\n<li>\n<p><strong>Explore your blog</strong>\nOpen <code>http://localhost:3000</code> to see NovaBoost in action.</p>\n</li>\n</ol>\n<h3 id="using-ai-powered-post-generation">Using AI-Powered Post Generation</h3>\n<p>NovaBoost offers a convenient command to leverage OpenAI’s API for drafting articles:</p>\n<p>This command creates a draft Markdown file in <code>/src/content</code>, ready for your review and customization.</p>\n<h3 id="customization--deployment">Customization &#x26; Deployment</h3>\n<ul>\n<li><strong>Site Configuration</strong>: Update <code>astro.config.mjs</code> with your domain, metadata, and any custom settings.</li>\n<li><strong>Styles &#x26; Themes</strong>: Tweak Tailwind utility classes in <code>src/styles</code> to match your brand’s look and feel.</li>\n<li><strong>Deployment</strong>: Seamlessly deploy to Vercel, Netlify, or any static hosting provider.</li>\n</ul>\n<h3 id="conclusion">Conclusion</h3>\n<p>NovaBoost is more than just a template—it’s a toolkit for launching a modern, efficient blog in minutes. With its modular structure and optional AI features, it’s perfect for both developers and content creators.</p>\n<p>Contribute and learn more on GitHub: <a href="https://github.com/JorgeRosbel/NovaBoost">NovaBoost</a></p>', { headings: 27, localImagePaths: 47, remoteImagePaths: 48, frontmatter: 49, imagePaths: 52 }, [28, 31, 35, 38, 41, 44], { depth: 29, slug: 30, text: 14 }, 1, "introducing-novaboost-the-ultimate-astro--tailwindcss-blog-template", { depth: 32, slug: 33, text: 34 }, 3, "key-features", "Key Features", { depth: 32, slug: 36, text: 37 }, "installation--quick-start", "Installation & Quick Start", { depth: 32, slug: 39, text: 40 }, "using-ai-powered-post-generation", "Using AI-Powered Post Generation", { depth: 32, slug: 42, text: 43 }, "customization--deployment", "Customization & Deployment", { depth: 32, slug: 45, text: 46 }, "conclusion", "Conclusion", [], [], { title: 14, pubDate: 50, tags: 51, description: 15 }, "Jul 27 2025", [18, 19, 20], [], "introducing-gitzen-ai-powered-git-commit-automation", { id: 53, data: 55, body: 64, filePath: 65, digest: 66, rendered: 67 }, { title: 56, description: 57, pubDate: 58, tags: 59 }, "Introducing Gitzen: AI-Powered Git Commit Automation", "Discover Gitzen, the revolutionary AI-powered CLI tool that transforms how developers write Git commit messages and manage repository changes with intelligent automation.", ["Date", "2025-07-26T22:00:00.000Z"], [60, 61, 62, 63], "git", "ai", "cli", "commit-messages", '# Introducing Gitzen: The Future of Git Commit Automation\n\nAre you tired of spending precious development time crafting the perfect commit message? Meet **Gitzen**, a groundbreaking AI-powered command-line tool that revolutionizes how developers interact with Git repositories. \n\n## What Makes Gitzen Special?\n\nGitzen isn\'t just another Git helper – it\'s an intelligent assistant that understands your code changes and generates meaningful commit messages automatically. The tool integrates seamlessly with popular AI providers like OpenAI and Google Gemini, bringing enterprise-grade artificial intelligence directly to your development workflow.\n\n## Four Core Commands That Transform Your Workflow\n\n### 🚀 `gitzen start` - One-Time Setup\nThe interactive configuration wizard that gets you started in minutes. It guides you through:\n\n- **Template Selection**: Choose from Conventional Commits, Angular, or Commitlint formats \n- **AI Model Selection**: Pick from GPT-4, GPT-4o, or Google Gemini models \n- **Language Configuration**: Support for 9 languages including English, Spanish, French, German, and more \n- **Message Length**: Customize commit message size from 16-120 characters \n- **API Key Setup**: Secure configuration for your chosen AI provider\n\n### 🧠 `gitzen commit` - Smart Single Commits\nAnalyzes your staged changes and generates contextually relevant commit messages. The process:\n\n1. Reads your staged changes using `git diff --cached` \n2. Sends the diff to your configured AI model\n3. Generates a professional commit message following your chosen template\n4. Asks for confirmation before committing\n\n**Usage:**\n```bash\ngit add .\ngitzen commit\n```\n\n### 📦 `gitzen batch` - Intelligent Multi-Commit Automation\nThe most powerful feature - automatically groups your unstaged changes into logical commits.  Here\'s how it works:\n\n1. **Analyzes Unstaged Changes**: Scans all modified files in your working directory  \n2. **AI-Powered Grouping**: Uses structured AI responses to group related files by purpose and functionality\n3. **Generates Commit Plan**: Creates appropriate commit messages for each logical group\n4. **Sequential Execution**: After your approval, automatically stages and commits each group \n\n**Usage:**\n```bash\n# Make multiple changes across different files\ngitzen batch\n# Review the proposed commit groups\n# Approve and watch automatic commits happen\n```\n\n### 📊 `gitzen summarize` - Comprehensive Change Analysis\nGet detailed insights into all your modifications before committing.  Features:\n\n- Analyzes both staged and unstaged changes\n- Explains WHAT changed and WHY it\'s relevant\n- Supports language override with `-l` or `--lang` flag\n- Perfect for code reviews and documentation\n\n**Usage:**\n```bash\ngitzen summarize\ngitzen summarize -l es  # Spanish summary\ngitzen summarize --lang french\n```\n\n## Technical Implementation\n\n### AI Integration\nGitzen supports multiple AI providers through a unified interface:\n- **OpenAI**: GPT-4, GPT-4o, GPT-3.5 Turbo models\n- **Google**: Gemini 2.5 Flash and 2.0 Flash models\n\n### Git Operations\nThe tool performs safe Git operations through Node.js child processes:\n- Reads diffs using `git diff` commands\n- Stages files with `git add`\n- Creates commits with `git commit -m`\n- Validates repository status before operations\n\n### Configuration Management\nAll settings are stored in a local `gitzen.config.json` file: \n\n```json\n{\n  "language": "en",\n  "template": "conventional",\n  "model": "gpt-4o-mini",\n  "size": "36–50 characters",\n  "provider": "openai"\n}\n```\n\n## Installation & Quick Start\n\n```bash\n# Install globally\nnpm install -g gitzen\n\n# Run setup wizard\ngitzen start\n\n# Start using immediately\ngit add .\ngitzen commit\n```\n\n## Real-World Workflow Transformation\n\n**Before Gitzen:**\n1. Make changes across multiple files\n2. Manually stage related files\n3. Struggle to write meaningful commit messages\n4. Repeat for each logical change\n5. End up with inconsistent commit history\n\n**With Gitzen:**\n1. Make all your changes\n2. Run `gitzen batch`\n3. Review AI-generated commit plan\n4. Approve and get professional commit history automatically\n\n## Why Developers Choose Gitzen\n\n- **Time Savings**: Eliminate the mental overhead of writing commit messages\n- **Consistency**: Professional, standardized commit messages across your team\n- **Intelligence**: AI understands your code context, not just file names\n- **Flexibility**: Works with your preferred AI provider and commit style\n- **Safety**: Always asks for confirmation before making commits\n\nReady to transform your Git workflow? Install Gitzen today and experience the future of intelligent version control.', "src/content/blog/introducing-gitzen-ai-powered-git-commit-automation.md", "d73676ea0f47b909", { html: 68, metadata: 69 }, '<h1 id="introducing-gitzen-the-future-of-git-commit-automation">Introducing Gitzen: The Future of Git Commit Automation</h1>\n<p>Are you tired of spending precious development time crafting the perfect commit message? Meet <strong>Gitzen</strong>, a groundbreaking AI-powered command-line tool that revolutionizes how developers interact with Git repositories.</p>\n<h2 id="what-makes-gitzen-special">What Makes Gitzen Special?</h2>\n<p>Gitzen isn’t just another Git helper – it’s an intelligent assistant that understands your code changes and generates meaningful commit messages automatically. The tool integrates seamlessly with popular AI providers like OpenAI and Google Gemini, bringing enterprise-grade artificial intelligence directly to your development workflow.</p>\n<h2 id="four-core-commands-that-transform-your-workflow">Four Core Commands That Transform Your Workflow</h2>\n<h3 id="-gitzen-start---one-time-setup">🚀 <code>gitzen start</code> - One-Time Setup</h3>\n<p>The interactive configuration wizard that gets you started in minutes. It guides you through:</p>\n<ul>\n<li><strong>Template Selection</strong>: Choose from Conventional Commits, Angular, or Commitlint formats</li>\n<li><strong>AI Model Selection</strong>: Pick from GPT-4, GPT-4o, or Google Gemini models</li>\n<li><strong>Language Configuration</strong>: Support for 9 languages including English, Spanish, French, German, and more</li>\n<li><strong>Message Length</strong>: Customize commit message size from 16-120 characters</li>\n<li><strong>API Key Setup</strong>: Secure configuration for your chosen AI provider</li>\n</ul>\n<h3 id="-gitzen-commit---smart-single-commits">🧠 <code>gitzen commit</code> - Smart Single Commits</h3>\n<p>Analyzes your staged changes and generates contextually relevant commit messages. The process:</p>\n<ol>\n<li>Reads your staged changes using <code>git diff --cached</code></li>\n<li>Sends the diff to your configured AI model</li>\n<li>Generates a professional commit message following your chosen template</li>\n<li>Asks for confirmation before committing</li>\n</ol>\n<p><strong>Usage:</strong></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="bash"><code><span class="line"><span style="color:#B392F0">git</span><span style="color:#9ECBFF"> add</span><span style="color:#9ECBFF"> .</span></span>\n<span class="line"><span style="color:#B392F0">gitzen</span><span style="color:#9ECBFF"> commit</span></span></code></pre>\n<h3 id="-gitzen-batch---intelligent-multi-commit-automation">📦 <code>gitzen batch</code> - Intelligent Multi-Commit Automation</h3>\n<p>The most powerful feature - automatically groups your unstaged changes into logical commits.  Here’s how it works:</p>\n<ol>\n<li><strong>Analyzes Unstaged Changes</strong>: Scans all modified files in your working directory</li>\n<li><strong>AI-Powered Grouping</strong>: Uses structured AI responses to group related files by purpose and functionality</li>\n<li><strong>Generates Commit Plan</strong>: Creates appropriate commit messages for each logical group</li>\n<li><strong>Sequential Execution</strong>: After your approval, automatically stages and commits each group</li>\n</ol>\n<p><strong>Usage:</strong></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="bash"><code><span class="line"><span style="color:#6A737D"># Make multiple changes across different files</span></span>\n<span class="line"><span style="color:#B392F0">gitzen</span><span style="color:#9ECBFF"> batch</span></span>\n<span class="line"><span style="color:#6A737D"># Review the proposed commit groups</span></span>\n<span class="line"><span style="color:#6A737D"># Approve and watch automatic commits happen</span></span></code></pre>\n<h3 id="-gitzen-summarize---comprehensive-change-analysis">📊 <code>gitzen summarize</code> - Comprehensive Change Analysis</h3>\n<p>Get detailed insights into all your modifications before committing.  Features:</p>\n<ul>\n<li>Analyzes both staged and unstaged changes</li>\n<li>Explains WHAT changed and WHY it’s relevant</li>\n<li>Supports language override with <code>-l</code> or <code>--lang</code> flag</li>\n<li>Perfect for code reviews and documentation</li>\n</ul>\n<p><strong>Usage:</strong></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="bash"><code><span class="line"><span style="color:#B392F0">gitzen</span><span style="color:#9ECBFF"> summarize</span></span>\n<span class="line"><span style="color:#B392F0">gitzen</span><span style="color:#9ECBFF"> summarize</span><span style="color:#79B8FF"> -l</span><span style="color:#9ECBFF"> es</span><span style="color:#6A737D">  # Spanish summary</span></span>\n<span class="line"><span style="color:#B392F0">gitzen</span><span style="color:#9ECBFF"> summarize</span><span style="color:#79B8FF"> --lang</span><span style="color:#9ECBFF"> french</span></span></code></pre>\n<h2 id="technical-implementation">Technical Implementation</h2>\n<h3 id="ai-integration">AI Integration</h3>\n<p>Gitzen supports multiple AI providers through a unified interface:</p>\n<ul>\n<li><strong>OpenAI</strong>: GPT-4, GPT-4o, GPT-3.5 Turbo models</li>\n<li><strong>Google</strong>: Gemini 2.5 Flash and 2.0 Flash models</li>\n</ul>\n<h3 id="git-operations">Git Operations</h3>\n<p>The tool performs safe Git operations through Node.js child processes:</p>\n<ul>\n<li>Reads diffs using <code>git diff</code> commands</li>\n<li>Stages files with <code>git add</code></li>\n<li>Creates commits with <code>git commit -m</code></li>\n<li>Validates repository status before operations</li>\n</ul>\n<h3 id="configuration-management">Configuration Management</h3>\n<p>All settings are stored in a local <code>gitzen.config.json</code> file:</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="json"><code><span class="line"><span style="color:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#79B8FF">  "language"</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">"en"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#79B8FF">  "template"</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">"conventional"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#79B8FF">  "model"</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">"gpt-4o-mini"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#79B8FF">  "size"</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">"36–50 characters"</span><span style="color:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#79B8FF">  "provider"</span><span style="color:#E1E4E8">: </span><span style="color:#9ECBFF">"openai"</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span></code></pre>\n<h2 id="installation--quick-start">Installation &#x26; Quick Start</h2>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="bash"><code><span class="line"><span style="color:#6A737D"># Install globally</span></span>\n<span class="line"><span style="color:#B392F0">npm</span><span style="color:#9ECBFF"> install</span><span style="color:#79B8FF"> -g</span><span style="color:#9ECBFF"> gitzen</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D"># Run setup wizard</span></span>\n<span class="line"><span style="color:#B392F0">gitzen</span><span style="color:#9ECBFF"> start</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D"># Start using immediately</span></span>\n<span class="line"><span style="color:#B392F0">git</span><span style="color:#9ECBFF"> add</span><span style="color:#9ECBFF"> .</span></span>\n<span class="line"><span style="color:#B392F0">gitzen</span><span style="color:#9ECBFF"> commit</span></span></code></pre>\n<h2 id="real-world-workflow-transformation">Real-World Workflow Transformation</h2>\n<p><strong>Before Gitzen:</strong></p>\n<ol>\n<li>Make changes across multiple files</li>\n<li>Manually stage related files</li>\n<li>Struggle to write meaningful commit messages</li>\n<li>Repeat for each logical change</li>\n<li>End up with inconsistent commit history</li>\n</ol>\n<p><strong>With Gitzen:</strong></p>\n<ol>\n<li>Make all your changes</li>\n<li>Run <code>gitzen batch</code></li>\n<li>Review AI-generated commit plan</li>\n<li>Approve and get professional commit history automatically</li>\n</ol>\n<h2 id="why-developers-choose-gitzen">Why Developers Choose Gitzen</h2>\n<ul>\n<li><strong>Time Savings</strong>: Eliminate the mental overhead of writing commit messages</li>\n<li><strong>Consistency</strong>: Professional, standardized commit messages across your team</li>\n<li><strong>Intelligence</strong>: AI understands your code context, not just file names</li>\n<li><strong>Flexibility</strong>: Works with your preferred AI provider and commit style</li>\n<li><strong>Safety</strong>: Always asks for confirmation before making commits</li>\n</ul>\n<p>Ready to transform your Git workflow? Install Gitzen today and experience the future of intelligent version control.</p>', { headings: 70, localImagePaths: 112, remoteImagePaths: 113, frontmatter: 114, imagePaths: 116 }, [71, 74, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 106, 109], { depth: 29, slug: 72, text: 73 }, "introducing-gitzen-the-future-of-git-commit-automation", "Introducing Gitzen: The Future of Git Commit Automation", { depth: 75, slug: 76, text: 77 }, 2, "what-makes-gitzen-special", "What Makes Gitzen Special?", { depth: 75, slug: 79, text: 80 }, "four-core-commands-that-transform-your-workflow", "Four Core Commands That Transform Your Workflow", { depth: 32, slug: 82, text: 83 }, "-gitzen-start---one-time-setup", "🚀 gitzen start - One-Time Setup", { depth: 32, slug: 85, text: 86 }, "-gitzen-commit---smart-single-commits", "🧠 gitzen commit - Smart Single Commits", { depth: 32, slug: 88, text: 89 }, "-gitzen-batch---intelligent-multi-commit-automation", "📦 gitzen batch - Intelligent Multi-Commit Automation", { depth: 32, slug: 91, text: 92 }, "-gitzen-summarize---comprehensive-change-analysis", "📊 gitzen summarize - Comprehensive Change Analysis", { depth: 75, slug: 94, text: 95 }, "technical-implementation", "Technical Implementation", { depth: 32, slug: 97, text: 98 }, "ai-integration", "AI Integration", { depth: 32, slug: 100, text: 101 }, "git-operations", "Git Operations", { depth: 32, slug: 103, text: 104 }, "configuration-management", "Configuration Management", { depth: 75, slug: 36, text: 37 }, { depth: 75, slug: 107, text: 108 }, "real-world-workflow-transformation", "Real-World Workflow Transformation", { depth: 75, slug: 110, text: 111 }, "why-developers-choose-gitzen", "Why Developers Choose Gitzen", [], [], { title: 56, pubDate: 50, tags: 115, description: 57 }, [60, 61, 62, 63], [], "conoce-http-sentinel-simplifica-el-control-de-errores-sin-complicaciones", { id: 117, data: 119, body: 127, filePath: 128, digest: 129, rendered: 130 }, { title: 120, description: 121, pubDate: 122, tags: 123 }, "Conoce http-sentinel: simplifica el control de errores sin complicaciones", "Una guía práctica de HTTP Sentinel, la librería TypeScript que unifica el manejo de errores HTTP: descubre su motivación, características clave, instalación rápida e integración con Fetch, Axios y TanStack Query en React. Simplifica tu código, mejora la consistencia y ahorra tiempo de desarrollo.", ["Date", "2025-08-02T22:00:00.000Z"], [124, 125, 126], "npm", "error-handling", "ts", '# Conoce http-sentinel: simplifica el control de errores sin complicaciones\n\n*💥Una biblioteca de TypeScript que proporciona un conjunto completo de clases de error HTTP y utilidades para manejar errores HTTP en sus aplicaciones.*\n\n## 1. Motivación y contexto\n\n¿Te ha pasado que, en cada proyecto donde haces peticiones a una API, terminas repitiendo una y otra vez la misma lógica para capturar y procesar errores HTTP? A mí me pasaba constantemente: en un repositorio usaba un bloque **try/catch** , en otro un manejador diferente, y al final dedicaba más tiempo a reinventar la rueda que a desarrollar la funcionalidad real. \n\nEn muchas aplicaciones, el manejo de errores HTTP se sustituye por mensajes genéricos como “Algo salió mal” o “Imposible acceder”, que ofrecen cero feedback al usuario final. Además, durante el desarrollo o la implementación de nuevas funcionalidades, esta omisión genera dificultades para depurar e incrementar la deuda técnica.\n\nComo resultado el manejo de errores HTTP queda casi enteramente en manos de cada desarrollador: unos escriben bloques try/catch genéricos, otros crean soluciones puntuales o, en el peor de los casos, lo pasan por alto y muestran mensajes vagos como *“Algo salió mal”*. Esta incoherencia encarece el mantenimiento, dificulta la documentación y penaliza tanto la experiencia del usuario final como la capacidad de depurar e implementar nuevas funcionalidades.\n\nPor ello creé **HTTP Sentinel**, una librería en TypeScript que reúne clases de error y utilidades para gestionar de manera uniforme cualquier fallo HTTP. Gracias a ella, ya no tendrás que duplicar código ni enfrentarte a soluciones dispares: basta con importarla, lanzar o capturar la excepción correspondiente, y tu aplicación se encargará de todos los errores de forma coherente y eficiente.\n\n\n## 2. Principales características de HTTP Sentinel\n\nHTTP Sentinel agrupa todo lo que necesitas para tratar errores HTTP de forma consistente y productiva:\n\n* **Cobertura completa de códigos de estado**:\n  Clases predefinidas para todos los errores 4xx y 5xx conocidos (por ejemplo, *BadRequestError*, *UnauthorizedError*, *InternalServerError*, etc.), para que no tengas que crearlas tú mismo.\n\n* **Mensajes de error personalizables**:\n  Cada clase acepta un mensaje descriptivo, de modo que puedas enriquecer la respuesta y facilitar el debug.\n\n* **Utilidades de detección y filtrado**:\n  Funciones como *resolveHttpError(status)*, *matches(error)*, *compare(error, BadRequestErro)* te permiten:\n\n  1. Lanzar un error basado en el *status* de la petición.\n  2. Saber si un error proviene de HTTP Sentinel.\n  3. Identificar rápidamente el tipo de error asociado\n\n* **Soporte nativo para TypeScript**:\n  Definiciones de tipos incluidas (*.d.ts*), para que disfrutes de autocompletado y validación en tiempo de compilación sin configuración extra.\n\n\n* **Extensible y lista para integrar**:\n  HTTP Sentinel está diseñada para funcionar en cualquier entorno JavaScript/TypeScript sin depender de un framework o librería concreta. Esto significa que puedes integrarla de forma sencilla con:\n\n  * **Funciones nativas de JavaScript** (Fetch API)\n  * **Bibliotecas populares** como Axios\n  * **Soluciones de fetching modernas** como TanStack Query\n\nCon HTTP Sentinel no solo tendrás todas las clases de error y utilidades en un único paquete, sino también una API clara y tipada que facilita el manejo uniforme de fallos en cualquier proyecto.\n\n\n## 3. Instalación rápida\n\nHTTP Sentinel no requiere **ninguna** configuración inicial: basta con instalarlo e importarlo en tu proyecto, lo que hace que su integración sea realmente sencilla.\n\n\n```bash\n// Usas tu gestor de paquetes favorito 🔥\n\nnpm i http-sentinel\npnpm i http-sentinel\nyarn add http-sentinel\n```\n\nDespués de la instalación, ya estás listo para empezar a usar HTTP Sentinel. Solo importa el namespace stn directamente desde el paquete:\n\n```ts\nimport { stn } from "http-sentinel"\n```\n\nAquí stn agrupa todas las funcionalidades de la librería: desde las clases de error hasta las utilidades. Así mantienes tu código organizado y claro.\n\n\n## 4. Primeros pasos: detectando y lanzado error\n\nEn esta sección, de manera introductoria, exploraremos cómo capturar e identificar los errores generados por una petición HTTP fallida utilizando la librería **http-sentinel**.\n\n\n#### Ejemplo de petición y manejo de errores\n\nImagina que estás haciendo una solicitud a una API y esta devuelve un error. A continuación, se muestra un ejemplo básico de cómo capturarlo y gestionarlo con la librería **http-sentinel**:\n\n```ts\nimport { stn } from "http-sentinel"\n\ntry {\n  const response = await fetch("http://endpoint.com/example");\n  const data = await response.json();\n\n  if (!response.ok) {\n    // Lanza un error basado en el código de estado HTTP\n    stn.tools.resolveHttpError(response.status);\n  }\n} catch (err) {\n  // Verifica si el error proviene de http-sentinel\n  if (stn.tools.matches(err)) {\n    // Compara el error con una colección predefinida\n    if (stn.compare(err, stn.collections.BadRequest)) {\n      // Maneja específicamente el error 400 Bad Request\n    }\n\n    // Aquí puedes agregar más condiciones para manejar otros tipos de errores esperados\n  }\n}\n```\n\nAl gestionar los errores HTTP con **http-sentinel**, obtienes varias ventajas clave: evitas la duplicación de lógica al centralizar la creación y el reconocimiento de excepciones; garantizas un comportamiento uniforme en toda tu aplicación; facilitas la lectura y el mantenimiento del código, ya que cada fallo se describe y relaciona con una colección predefinida; y, por último, mejoras la capacidad de prueba, puesto que puedes simular y comprobar respuestas erróneas de forma controlada.\n\nTenga en cuenta que el ejemplo anterior es solo un uso básico; más adelante veremos cómo implementarlo adecuadamente en sus aplicaciones.\n\n## 5. Integración con React: uso conjunto de Axios, TanStack Query y HTTP Sentinel\n\nDado que HTTP Sentinel es completamente independiente de cualquier framework o librería, se integra de manera sencilla con cualquier herramienta que uses para desarrollar tu aplicación. En esta sección abordaremos cómo integrarla con axios, tanstack query y react mediante un caso real\n\n```ts\nimport axios, { isAxiosError } from "axios";\nimport { stn, type HttpStatusCode, type ExpectedError } from "http-sentinel";\nimport { useMutation } from "@tanstack/react-query";\nimport { useAuth } from "./useAuth";\nimport { useNavigate } from "react-router-dom";\nimport { jwtDecode } from "jwt-decode";\n\n\nexport interface TokenPayload {\n    sub:string | null;\n    user_id:number | null;\n    is_active:number | null;\n    role:string | null\n}\n\n\nexport interface ILoginForm {\n    email:string;\n    password:string;\n}\n\nexport interface Token {\n    access_token:string;\n}\n\nexport const useLogin = () => {\n    const setAccesToken = useAuth(state => state.setAccesToken);\n    const setDecoded = useAuth(state => state.setDecoded)\n    const goTo = useNavigate();\n\n    const mutationFn = async(data:ILoginForm):Promise<Token> => {\n\n        try{\n            const endpoint = import.meta.env.VITE_API_LOGIN as string;\n            const response = await axios.post<Token>(endpoint,data, {\n                withCredentials:true,\n                skipAuthRefresh: true\n            });\n\n            return response.data\n\n        }\n        catch (error:unknown){\n            if(isAxiosError(error)){\n                // Obtenemos el status code\n                const status = error.response?.status as HttpStatusCode\n                // Lanzamos un error en basado en el status code\n                if(status){ stn.tools.resolveHttpError(status) }\n            }\n\n            throw new Error("Error desconocido")\n        }\n    }\n\n    // Note que puede tipar el error esperado\n    return useMutation<Token, ExpectedError,ILoginForm>({\n        mutationFn: mutationFn, \n        onSuccess: (data:Token) => { \n            if(data.access_token) {\n                setAccesToken(data.access_token);\n                setDecoded(jwtDecode<TokenPayload>(data.access_token));\n                goTo("/informacion");\n            }\n        }\n    })\n\n}\n\n```\n\nTenga en cuenta que no es necesario usar exclusivamente *stn.tools.resolveHttpError(status)* para lanzar errores: la librería incluye atajos específicos que aceptan un mensaje opcional. Si no lo proporciona, se mostrará uno por defecto. Por ejemplo:\n\n```ts\n// Lanza un 400 Bad Request\nstn.throw.BadRequest(\'Mensaje de error personalizado\');  // ✅\nstn.throw.BadRequest();                                 // ✅\n\n// Lanza un error desconocido\nstn.throw.UnknownError(\'Mi error desconocido\');         // ✅\nstn.throw.UnknownError();                               // ✅\n\n// Evite usar `throw new`, ya que la librería gestiona internamente la creación de la excepción\nthrow new stn.throw.UnknownError(\'Mi error desconocido\'); // ❌\nthrow stn.throw.UnknownError();                           // ❌\n\n```\n\nEn tu componente de React:\n\n```ts\nimport { stn, type ExpectedError } from "http-sentinel";\n\nexport const LoginForm:React.FC = () => {\n\n    const {mutate,status,error} = useLogin();\n    const [formState, setFormState] = useState<ILoginForm>({email: \'\', password: \'\'});\n    const [showPassword, setShowPassword] = useState(false);\n\n    const handleInput = (e:React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = e.target;\n        setFormState({...formState, [name]: value})\n    } \n\n    const handleEye = () => {\n        setShowPassword(!showPassword);\n    }\n\n    const handleSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n\n        e.preventDefault();\n\n        if(formState.email.length > 0 && formState.password.length > 0 ){\n            mutate(formState)\n        }\n    }\n\n    const handleError = (error: ExpectedError | Error) => {\n\n\n        if(stn.tools.matches(error)){\n            if(stn.tools.compare(error, stn.collections.Unauthorized)) return "Credenciales incorrectas"\n            if(stn.tools.compare(error, stn.collections.TooManyRequests)) return "Demasiados intentos"\n            //otras comprobaciones\n\n            // Note que puede acceder a error.message, error.status_code. En este caso preferí hacerlo de esta\n            // forma para tener un mensaje custom usando stn.tools.resolveHttpError(status)\n        }\n\n        return "Error desconocido";\n\n    }\n\n    // Ahora nuestro botón tendrá un texto dieferente segun el estado de la petición y si se produce un error\n    // muestra un mensaje personalizado\n\n    return (\n      <div>\n        <button>\n        {\n          status === "idle" ? "Iniciar":\n          status === "pending" ? <FaSpinner className="text-white animate-spin text-2xl" />:\n          status === "error" ? handleError(error) : "Correcto"\n        }\n        <button/>\n      </div>\n    )\n\n```\n\nSi prefieres interceptar la respuesta en tu hook o función de fetch/axios y escribir un mensaje personalizado, podrías hacer esto:\n\n```ts\nif(isAxiosError(error)){\n  // Obtenemos el status code\n  const status = error.response?.status as HttpStatusCode\n  // Lanzamos un error en basado en el status code\n  if(status === 400){ stn.throw.BadRequest("tu mensaje personalizado") }\n  else if(status === ....) { ... }\n}\n```\n\n\nEn el componente mantendrías la lógica de renderizado igual, mostrando error.message cuando status === "error". De esta forma, todo el mapeo de códigos HTTP a excepciones lo haces en un solo lugar, y el componente solo muestra el mensaje resultante.\n\n\n```ts\n\n return (\n      <div>\n        <button>\n        {\n          status === "idle" ? "Iniciar":\n          status === "pending" ? <FaSpinner className="text-white animate-spin text-2xl" />:\n          status === "error" ? error.message : "Correcto"\n        }\n        <button/>\n      </div>\n    )\n\n```\n\nY así, combinando React, TanStack Query y Axios con HTTP Sentinel obtenemos un flujo de trabajo robusto y coherente para todas nuestras peticiones: centralizamos el mapeo de códigos HTTP a excepciones, unificamos la detección y el tratamiento de errores, y mantenemos el componente enfocado solo en la presentación y la navegación. El resultado es un código más limpio, fácil de mantener y probar, con mensajes de error claros y consistentes y una experiencia de usuario mucho más fiable.\n\n\n### 6. Métricas de rendimiento\n\n| Métrica | Valor | Descripción |\n|---------|-------|-------------|\n| **Bundle size (minified)** | 5.4 kB | Tamaño de la librería minificada |\n| **Bundle size (gzipped)** | 1.7 kB | Tamaño comprimido que se transfiere por red |\n| **Tiempo de descarga (3G lenta)** | 35 ms | Tiempo de descarga en conexiones lentas |\n| **Tiempo de descarga (4G emergente)** | 2 ms | Tiempo de descarga en conexiones modernas |\n| **Dependencias** | 0 | Sin dependencias externas |\n| **Tree-shaking** | ✅ Soportado | Importa solo lo que necesitas |\n\n*Datos obtenidos de [Bundlephobia](https://bundlephobia.com/package/http-sentinel@1.0.11)*\n\nEstos números demuestran que HTTP Sentinel es una solución extremadamente eficiente: el tamaño gzipped de solo 1.7 kB significa que agregar manejo robusto de errores HTTP a tu aplicación tiene un costo prácticamente imperceptible en términos de rendimiento.\n\n---\nEspero que este artículo les resulte interesante y les sea de gran utilidad en sus futuros proyectos. Pueden consultar el repositorio oficial de **HTTP Sentinel** en GitHub:\n\n🚀[https://github.com/JorgeRosbel/http-sentinel](https://github.com/JorgeRosbel/http-sentinel)\n\nSe agradece cualquier comentario o contribución. No duden en darle ⭐ al repositorio si les ha resultado útil o ha facilitado su proceso de desarrollo.\n\n\nMuchas gracias por llegar hasta aquí', "src/content/blog/conoce-http-sentinel-simplifica-el-control-de-errores-sin-complicaciones.md", "498cde085f95f691", { html: 131, metadata: 132 }, `<h1 id="conoce-http-sentinel-simplifica-el-control-de-errores-sin-complicaciones">Conoce http-sentinel: simplifica el control de errores sin complicaciones</h1>
<p><em>💥Una biblioteca de TypeScript que proporciona un conjunto completo de clases de error HTTP y utilidades para manejar errores HTTP en sus aplicaciones.</em></p>
<h2 id="1-motivación-y-contexto">1. Motivación y contexto</h2>
<p>¿Te ha pasado que, en cada proyecto donde haces peticiones a una API, terminas repitiendo una y otra vez la misma lógica para capturar y procesar errores HTTP? A mí me pasaba constantemente: en un repositorio usaba un bloque <strong>try/catch</strong> , en otro un manejador diferente, y al final dedicaba más tiempo a reinventar la rueda que a desarrollar la funcionalidad real.</p>
<p>En muchas aplicaciones, el manejo de errores HTTP se sustituye por mensajes genéricos como “Algo salió mal” o “Imposible acceder”, que ofrecen cero feedback al usuario final. Además, durante el desarrollo o la implementación de nuevas funcionalidades, esta omisión genera dificultades para depurar e incrementar la deuda técnica.</p>
<p>Como resultado el manejo de errores HTTP queda casi enteramente en manos de cada desarrollador: unos escriben bloques try/catch genéricos, otros crean soluciones puntuales o, en el peor de los casos, lo pasan por alto y muestran mensajes vagos como <em>“Algo salió mal”</em>. Esta incoherencia encarece el mantenimiento, dificulta la documentación y penaliza tanto la experiencia del usuario final como la capacidad de depurar e implementar nuevas funcionalidades.</p>
<p>Por ello creé <strong>HTTP Sentinel</strong>, una librería en TypeScript que reúne clases de error y utilidades para gestionar de manera uniforme cualquier fallo HTTP. Gracias a ella, ya no tendrás que duplicar código ni enfrentarte a soluciones dispares: basta con importarla, lanzar o capturar la excepción correspondiente, y tu aplicación se encargará de todos los errores de forma coherente y eficiente.</p>
<h2 id="2-principales-características-de-http-sentinel">2. Principales características de HTTP Sentinel</h2>
<p>HTTP Sentinel agrupa todo lo que necesitas para tratar errores HTTP de forma consistente y productiva:</p>
<ul>
<li>
<p><strong>Cobertura completa de códigos de estado</strong>:
Clases predefinidas para todos los errores 4xx y 5xx conocidos (por ejemplo, <em>BadRequestError</em>, <em>UnauthorizedError</em>, <em>InternalServerError</em>, etc.), para que no tengas que crearlas tú mismo.</p>
</li>
<li>
<p><strong>Mensajes de error personalizables</strong>:
Cada clase acepta un mensaje descriptivo, de modo que puedas enriquecer la respuesta y facilitar el debug.</p>
</li>
<li>
<p><strong>Utilidades de detección y filtrado</strong>:
Funciones como <em>resolveHttpError(status)</em>, <em>matches(error)</em>, <em>compare(error, BadRequestErro)</em> te permiten:</p>
<ol>
<li>Lanzar un error basado en el <em>status</em> de la petición.</li>
<li>Saber si un error proviene de HTTP Sentinel.</li>
<li>Identificar rápidamente el tipo de error asociado</li>
</ol>
</li>
<li>
<p><strong>Soporte nativo para TypeScript</strong>:
Definiciones de tipos incluidas (<em>.d.ts</em>), para que disfrutes de autocompletado y validación en tiempo de compilación sin configuración extra.</p>
</li>
<li>
<p><strong>Extensible y lista para integrar</strong>:
HTTP Sentinel está diseñada para funcionar en cualquier entorno JavaScript/TypeScript sin depender de un framework o librería concreta. Esto significa que puedes integrarla de forma sencilla con:</p>
<ul>
<li><strong>Funciones nativas de JavaScript</strong> (Fetch API)</li>
<li><strong>Bibliotecas populares</strong> como Axios</li>
<li><strong>Soluciones de fetching modernas</strong> como TanStack Query</li>
</ul>
</li>
</ul>
<p>Con HTTP Sentinel no solo tendrás todas las clases de error y utilidades en un único paquete, sino también una API clara y tipada que facilita el manejo uniforme de fallos en cualquier proyecto.</p>
<h2 id="3-instalación-rápida">3. Instalación rápida</h2>
<p>HTTP Sentinel no requiere <strong>ninguna</strong> configuración inicial: basta con instalarlo e importarlo en tu proyecto, lo que hace que su integración sea realmente sencilla.</p>
<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="bash"><code><span class="line"><span style="color:#B392F0">//</span><span style="color:#9ECBFF"> Usas</span><span style="color:#9ECBFF"> tu</span><span style="color:#9ECBFF"> gestor</span><span style="color:#9ECBFF"> de</span><span style="color:#9ECBFF"> paquetes</span><span style="color:#9ECBFF"> favorito</span><span style="color:#9ECBFF"> 🔥</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0">npm</span><span style="color:#9ECBFF"> i</span><span style="color:#9ECBFF"> http-sentinel</span></span>
<span class="line"><span style="color:#B392F0">pnpm</span><span style="color:#9ECBFF"> i</span><span style="color:#9ECBFF"> http-sentinel</span></span>
<span class="line"><span style="color:#B392F0">yarn</span><span style="color:#9ECBFF"> add</span><span style="color:#9ECBFF"> http-sentinel</span></span></code></pre>
<p>Después de la instalación, ya estás listo para empezar a usar HTTP Sentinel. Solo importa el namespace stn directamente desde el paquete:</p>
<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { stn } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "http-sentinel"</span></span></code></pre>
<p>Aquí stn agrupa todas las funcionalidades de la librería: desde las clases de error hasta las utilidades. Así mantienes tu código organizado y claro.</p>
<h2 id="4-primeros-pasos-detectando-y-lanzado-error">4. Primeros pasos: detectando y lanzado error</h2>
<p>En esta sección, de manera introductoria, exploraremos cómo capturar e identificar los errores generados por una petición HTTP fallida utilizando la librería <strong>http-sentinel</strong>.</p>
<h4 id="ejemplo-de-petición-y-manejo-de-errores">Ejemplo de petición y manejo de errores</h4>
<p>Imagina que estás haciendo una solicitud a una API y esta devuelve un error. A continuación, se muestra un ejemplo básico de cómo capturarlo y gestionarlo con la librería <strong>http-sentinel</strong>:</p>
<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { stn } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "http-sentinel"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">try</span><span style="color:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#F97583">  const</span><span style="color:#79B8FF"> response</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> fetch</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"http://endpoint.com/example"</span><span style="color:#E1E4E8">);</span></span>
<span class="line"><span style="color:#F97583">  const</span><span style="color:#79B8FF"> data</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> response.</span><span style="color:#B392F0">json</span><span style="color:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">  if</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">response.ok) {</span></span>
<span class="line"><span style="color:#6A737D">    // Lanza un error basado en el código de estado HTTP</span></span>
<span class="line"><span style="color:#E1E4E8">    stn.tools.</span><span style="color:#B392F0">resolveHttpError</span><span style="color:#E1E4E8">(response.status);</span></span>
<span class="line"><span style="color:#E1E4E8">  }</span></span>
<span class="line"><span style="color:#E1E4E8">} </span><span style="color:#F97583">catch</span><span style="color:#E1E4E8"> (err) {</span></span>
<span class="line"><span style="color:#6A737D">  // Verifica si el error proviene de http-sentinel</span></span>
<span class="line"><span style="color:#F97583">  if</span><span style="color:#E1E4E8"> (stn.tools.</span><span style="color:#B392F0">matches</span><span style="color:#E1E4E8">(err)) {</span></span>
<span class="line"><span style="color:#6A737D">    // Compara el error con una colección predefinida</span></span>
<span class="line"><span style="color:#F97583">    if</span><span style="color:#E1E4E8"> (stn.</span><span style="color:#B392F0">compare</span><span style="color:#E1E4E8">(err, stn.collections.BadRequest)) {</span></span>
<span class="line"><span style="color:#6A737D">      // Maneja específicamente el error 400 Bad Request</span></span>
<span class="line"><span style="color:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D">    // Aquí puedes agregar más condiciones para manejar otros tipos de errores esperados</span></span>
<span class="line"><span style="color:#E1E4E8">  }</span></span>
<span class="line"><span style="color:#E1E4E8">}</span></span></code></pre>
<p>Al gestionar los errores HTTP con <strong>http-sentinel</strong>, obtienes varias ventajas clave: evitas la duplicación de lógica al centralizar la creación y el reconocimiento de excepciones; garantizas un comportamiento uniforme en toda tu aplicación; facilitas la lectura y el mantenimiento del código, ya que cada fallo se describe y relaciona con una colección predefinida; y, por último, mejoras la capacidad de prueba, puesto que puedes simular y comprobar respuestas erróneas de forma controlada.</p>
<p>Tenga en cuenta que el ejemplo anterior es solo un uso básico; más adelante veremos cómo implementarlo adecuadamente en sus aplicaciones.</p>
<h2 id="5-integración-con-react-uso-conjunto-de-axios-tanstack-query-y-http-sentinel">5. Integración con React: uso conjunto de Axios, TanStack Query y HTTP Sentinel</h2>
<p>Dado que HTTP Sentinel es completamente independiente de cualquier framework o librería, se integra de manera sencilla con cualquier herramienta que uses para desarrollar tu aplicación. En esta sección abordaremos cómo integrarla con axios, tanstack query y react mediante un caso real</p>
<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> axios, { isAxiosError } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "axios"</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { stn, </span><span style="color:#F97583">type</span><span style="color:#E1E4E8"> HttpStatusCode, </span><span style="color:#F97583">type</span><span style="color:#E1E4E8"> ExpectedError } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "http-sentinel"</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { useMutation } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "@tanstack/react-query"</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { useAuth } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "./useAuth"</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { useNavigate } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "react-router-dom"</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { jwtDecode } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "jwt-decode"</span><span style="color:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> interface</span><span style="color:#B392F0"> TokenPayload</span><span style="color:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#FFAB70">    sub</span><span style="color:#F97583">:</span><span style="color:#79B8FF">string</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#FFAB70">    user_id</span><span style="color:#F97583">:</span><span style="color:#79B8FF">number</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#FFAB70">    is_active</span><span style="color:#F97583">:</span><span style="color:#79B8FF">number</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#FFAB70">    role</span><span style="color:#F97583">:</span><span style="color:#79B8FF">string</span><span style="color:#F97583"> |</span><span style="color:#79B8FF"> null</span></span>
<span class="line"><span style="color:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> interface</span><span style="color:#B392F0"> ILoginForm</span><span style="color:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#FFAB70">    email</span><span style="color:#F97583">:</span><span style="color:#79B8FF">string</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#FFAB70">    password</span><span style="color:#F97583">:</span><span style="color:#79B8FF">string</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> interface</span><span style="color:#B392F0"> Token</span><span style="color:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#FFAB70">    access_token</span><span style="color:#F97583">:</span><span style="color:#79B8FF">string</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> const</span><span style="color:#B392F0"> useLogin</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#79B8FF"> setAccesToken</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> useAuth</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">state</span><span style="color:#F97583"> =></span><span style="color:#E1E4E8"> state.setAccesToken);</span></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#79B8FF"> setDecoded</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> useAuth</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">state</span><span style="color:#F97583"> =></span><span style="color:#E1E4E8"> state.setDecoded)</span></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#79B8FF"> goTo</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> useNavigate</span><span style="color:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#B392F0"> mutationFn</span><span style="color:#F97583"> =</span><span style="color:#F97583"> async</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">data</span><span style="color:#F97583">:</span><span style="color:#B392F0">ILoginForm</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">:</span><span style="color:#B392F0">Promise</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">Token</span><span style="color:#E1E4E8">> </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">        try</span><span style="color:#E1E4E8">{</span></span>
<span class="line"><span style="color:#F97583">            const</span><span style="color:#79B8FF"> endpoint</span><span style="color:#F97583"> =</span><span style="color:#F97583"> import</span><span style="color:#E1E4E8">.</span><span style="color:#79B8FF">meta</span><span style="color:#E1E4E8">.env.</span><span style="color:#79B8FF">VITE_API_LOGIN</span><span style="color:#F97583"> as</span><span style="color:#79B8FF"> string</span><span style="color:#E1E4E8">;</span></span>
<span class="line"><span style="color:#F97583">            const</span><span style="color:#79B8FF"> response</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> axios.</span><span style="color:#B392F0">post</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">Token</span><span style="color:#E1E4E8">>(endpoint,data, {</span></span>
<span class="line"><span style="color:#E1E4E8">                withCredentials:</span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">,</span></span>
<span class="line"><span style="color:#E1E4E8">                skipAuthRefresh: </span><span style="color:#79B8FF">true</span></span>
<span class="line"><span style="color:#E1E4E8">            });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">            return</span><span style="color:#E1E4E8"> response.data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">        }</span></span>
<span class="line"><span style="color:#F97583">        catch</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">error</span><span style="color:#F97583">:</span><span style="color:#79B8FF">unknown</span><span style="color:#E1E4E8">){</span></span>
<span class="line"><span style="color:#F97583">            if</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">isAxiosError</span><span style="color:#E1E4E8">(error)){</span></span>
<span class="line"><span style="color:#6A737D">                // Obtenemos el status code</span></span>
<span class="line"><span style="color:#F97583">                const</span><span style="color:#79B8FF"> status</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> error.response?.status </span><span style="color:#F97583">as</span><span style="color:#B392F0"> HttpStatusCode</span></span>
<span class="line"><span style="color:#6A737D">                // Lanzamos un error en basado en el status code</span></span>
<span class="line"><span style="color:#F97583">                if</span><span style="color:#E1E4E8">(status){ stn.tools.</span><span style="color:#B392F0">resolveHttpError</span><span style="color:#E1E4E8">(status) }</span></span>
<span class="line"><span style="color:#E1E4E8">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">            throw</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Error desconocido"</span><span style="color:#E1E4E8">)</span></span>
<span class="line"><span style="color:#E1E4E8">        }</span></span>
<span class="line"><span style="color:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D">    // Note que puede tipar el error esperado</span></span>
<span class="line"><span style="color:#F97583">    return</span><span style="color:#B392F0"> useMutation</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">Token</span><span style="color:#E1E4E8">, </span><span style="color:#B392F0">ExpectedError</span><span style="color:#E1E4E8">,</span><span style="color:#B392F0">ILoginForm</span><span style="color:#E1E4E8">>({</span></span>
<span class="line"><span style="color:#E1E4E8">        mutationFn: mutationFn, </span></span>
<span class="line"><span style="color:#B392F0">        onSuccess</span><span style="color:#E1E4E8">: (</span><span style="color:#FFAB70">data</span><span style="color:#F97583">:</span><span style="color:#B392F0">Token</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> { </span></span>
<span class="line"><span style="color:#F97583">            if</span><span style="color:#E1E4E8">(data.access_token) {</span></span>
<span class="line"><span style="color:#B392F0">                setAccesToken</span><span style="color:#E1E4E8">(data.access_token);</span></span>
<span class="line"><span style="color:#B392F0">                setDecoded</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">jwtDecode</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">TokenPayload</span><span style="color:#E1E4E8">>(data.access_token));</span></span>
<span class="line"><span style="color:#B392F0">                goTo</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"/informacion"</span><span style="color:#E1E4E8">);</span></span>
<span class="line"><span style="color:#E1E4E8">            }</span></span>
<span class="line"><span style="color:#E1E4E8">        }</span></span>
<span class="line"><span style="color:#E1E4E8">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">}</span></span>
<span class="line"></span></code></pre>
<p>Tenga en cuenta que no es necesario usar exclusivamente <em>stn.tools.resolveHttpError(status)</em> para lanzar errores: la librería incluye atajos específicos que aceptan un mensaje opcional. Si no lo proporciona, se mostrará uno por defecto. Por ejemplo:</p>
<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#6A737D">// Lanza un 400 Bad Request</span></span>
<span class="line"><span style="color:#E1E4E8">stn.throw.</span><span style="color:#B392F0">BadRequest</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'Mensaje de error personalizado'</span><span style="color:#E1E4E8">);  </span><span style="color:#6A737D">// ✅</span></span>
<span class="line"><span style="color:#E1E4E8">stn.throw.</span><span style="color:#B392F0">BadRequest</span><span style="color:#E1E4E8">();                                 </span><span style="color:#6A737D">// ✅</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D">// Lanza un error desconocido</span></span>
<span class="line"><span style="color:#E1E4E8">stn.throw.</span><span style="color:#B392F0">UnknownError</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'Mi error desconocido'</span><span style="color:#E1E4E8">);         </span><span style="color:#6A737D">// ✅</span></span>
<span class="line"><span style="color:#E1E4E8">stn.throw.</span><span style="color:#B392F0">UnknownError</span><span style="color:#E1E4E8">();                               </span><span style="color:#6A737D">// ✅</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D">// Evite usar \`throw new\`, ya que la librería gestiona internamente la creación de la excepción</span></span>
<span class="line"><span style="color:#F97583">throw</span><span style="color:#F97583"> new</span><span style="color:#E1E4E8"> stn.throw.</span><span style="color:#B392F0">UnknownError</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'Mi error desconocido'</span><span style="color:#E1E4E8">); </span><span style="color:#6A737D">// ❌</span></span>
<span class="line"><span style="color:#F97583">throw</span><span style="color:#E1E4E8"> stn.throw.</span><span style="color:#B392F0">UnknownError</span><span style="color:#E1E4E8">();                           </span><span style="color:#6A737D">// ❌</span></span>
<span class="line"></span></code></pre>
<p>En tu componente de React:</p>
<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> { stn, </span><span style="color:#F97583">type</span><span style="color:#E1E4E8"> ExpectedError } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "http-sentinel"</span><span style="color:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">export</span><span style="color:#F97583"> const</span><span style="color:#B392F0"> LoginForm</span><span style="color:#F97583">:</span><span style="color:#B392F0">React</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">FC</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#E1E4E8"> {</span><span style="color:#79B8FF">mutate</span><span style="color:#E1E4E8">,</span><span style="color:#79B8FF">status</span><span style="color:#E1E4E8">,</span><span style="color:#79B8FF">error</span><span style="color:#E1E4E8">} </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useLogin</span><span style="color:#E1E4E8">();</span></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">formState</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setFormState</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useState</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">ILoginForm</span><span style="color:#E1E4E8">>({email: </span><span style="color:#9ECBFF">''</span><span style="color:#E1E4E8">, password: </span><span style="color:#9ECBFF">''</span><span style="color:#E1E4E8">});</span></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">showPassword</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setShowPassword</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useState</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">false</span><span style="color:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#B392F0"> handleInput</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">e</span><span style="color:#F97583">:</span><span style="color:#B392F0">React</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">ChangeEvent</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">HTMLInputElement</span><span style="color:#E1E4E8">>) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#F97583">        const</span><span style="color:#E1E4E8"> { </span><span style="color:#79B8FF">name</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">value</span><span style="color:#E1E4E8"> } </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> e.target;</span></span>
<span class="line"><span style="color:#B392F0">        setFormState</span><span style="color:#E1E4E8">({</span><span style="color:#F97583">...</span><span style="color:#E1E4E8">formState, [name]: value})</span></span>
<span class="line"><span style="color:#E1E4E8">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#B392F0"> handleEye</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#B392F0">        setShowPassword</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">showPassword);</span></span>
<span class="line"><span style="color:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#B392F0"> handleSubmit</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">e</span><span style="color:#F97583">:</span><span style="color:#B392F0">React</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">FormEvent</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">HTMLFormElement</span><span style="color:#E1E4E8">>) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">        e.</span><span style="color:#B392F0">preventDefault</span><span style="color:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">        if</span><span style="color:#E1E4E8">(formState.email.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> ></span><span style="color:#79B8FF"> 0</span><span style="color:#F97583"> &#x26;&#x26;</span><span style="color:#E1E4E8"> formState.password.</span><span style="color:#79B8FF">length</span><span style="color:#F97583"> ></span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8"> ){</span></span>
<span class="line"><span style="color:#B392F0">            mutate</span><span style="color:#E1E4E8">(formState)</span></span>
<span class="line"><span style="color:#E1E4E8">        }</span></span>
<span class="line"><span style="color:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">    const</span><span style="color:#B392F0"> handleError</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">error</span><span style="color:#F97583">:</span><span style="color:#B392F0"> ExpectedError</span><span style="color:#F97583"> |</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">        if</span><span style="color:#E1E4E8">(stn.tools.</span><span style="color:#B392F0">matches</span><span style="color:#E1E4E8">(error)){</span></span>
<span class="line"><span style="color:#F97583">            if</span><span style="color:#E1E4E8">(stn.tools.</span><span style="color:#B392F0">compare</span><span style="color:#E1E4E8">(error, stn.collections.Unauthorized)) </span><span style="color:#F97583">return</span><span style="color:#9ECBFF"> "Credenciales incorrectas"</span></span>
<span class="line"><span style="color:#F97583">            if</span><span style="color:#E1E4E8">(stn.tools.</span><span style="color:#B392F0">compare</span><span style="color:#E1E4E8">(error, stn.collections.TooManyRequests)) </span><span style="color:#F97583">return</span><span style="color:#9ECBFF"> "Demasiados intentos"</span></span>
<span class="line"><span style="color:#6A737D">            //otras comprobaciones</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D">            // Note que puede acceder a error.message, error.status_code. En este caso preferí hacerlo de esta</span></span>
<span class="line"><span style="color:#6A737D">            // forma para tener un mensaje custom usando stn.tools.resolveHttpError(status)</span></span>
<span class="line"><span style="color:#E1E4E8">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">        return</span><span style="color:#9ECBFF"> "Error desconocido"</span><span style="color:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D">    // Ahora nuestro botón tendrá un texto dieferente segun el estado de la petición y si se produce un error</span></span>
<span class="line"><span style="color:#6A737D">    // muestra un mensaje personalizado</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583">    return</span><span style="color:#E1E4E8"> (</span></span>
<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#B392F0">div</span><span style="color:#E1E4E8">></span></span>
<span class="line"><span style="color:#E1E4E8">        &#x3C;</span><span style="color:#B392F0">button</span><span style="color:#E1E4E8">></span></span>
<span class="line"><span style="color:#E1E4E8">        {</span></span>
<span class="line"><span style="color:#FFAB70">          status</span><span style="color:#E1E4E8"> === "</span><span style="color:#FFAB70">idle</span><span style="color:#E1E4E8">" ? </span><span style="color:#9ECBFF">"Iniciar"</span><span style="color:#E1E4E8">:</span></span>
<span class="line"><span style="color:#FFAB70">          status</span><span style="color:#E1E4E8"> === </span><span style="color:#9ECBFF">"pending"</span><span style="color:#E1E4E8"> ? &#x3C;</span><span style="color:#FFAB70">FaSpinner</span><span style="color:#FFAB70"> className</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"text-white animate-spin text-2xl"</span><span style="color:#F97583"> /></span><span style="color:#E1E4E8">:</span></span>
<span class="line"><span style="color:#FFAB70">          status</span><span style="color:#E1E4E8"> === </span><span style="color:#9ECBFF">"error"</span><span style="color:#E1E4E8"> ? </span><span style="color:#FFAB70">handleError</span><span style="color:#E1E4E8">(error) : </span><span style="color:#9ECBFF">"Correcto"</span></span>
<span class="line"><span style="color:#E1E4E8">        }</span></span>
<span class="line"><span style="color:#F97583">        &#x3C;</span><span style="color:#E1E4E8">button</span><span style="color:#F97583">/></span></span>
<span class="line"><span style="color:#F97583">      &#x3C;/</span><span style="color:#E1E4E8">div</span><span style="color:#F97583">></span></span>
<span class="line"><span style="color:#E1E4E8">    )</span></span>
<span class="line"></span></code></pre>
<p>Si prefieres interceptar la respuesta en tu hook o función de fetch/axios y escribir un mensaje personalizado, podrías hacer esto:</p>
<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#F97583">if</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">isAxiosError</span><span style="color:#E1E4E8">(error)){</span></span>
<span class="line"><span style="color:#6A737D">  // Obtenemos el status code</span></span>
<span class="line"><span style="color:#F97583">  const</span><span style="color:#79B8FF"> status</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> error.response?.status </span><span style="color:#F97583">as</span><span style="color:#B392F0"> HttpStatusCode</span></span>
<span class="line"><span style="color:#6A737D">  // Lanzamos un error en basado en el status code</span></span>
<span class="line"><span style="color:#F97583">  if</span><span style="color:#E1E4E8">(status </span><span style="color:#F97583">===</span><span style="color:#79B8FF"> 400</span><span style="color:#E1E4E8">){ stn.throw.</span><span style="color:#B392F0">BadRequest</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"tu mensaje personalizado"</span><span style="color:#E1E4E8">) }</span></span>
<span class="line"><span style="color:#F97583">  else</span><span style="color:#F97583"> if</span><span style="color:#E1E4E8">(status </span><span style="color:#F97583">===</span><span style="color:#F97583"> ...</span><span style="color:#E1E4E8">.) { </span><span style="color:#F97583">...</span><span style="color:#E1E4E8"> }</span></span>
<span class="line"><span style="color:#E1E4E8">}</span></span></code></pre>
<p>En el componente mantendrías la lógica de renderizado igual, mostrando error.message cuando status === “error”. De esta forma, todo el mapeo de códigos HTTP a excepciones lo haces en un solo lugar, y el componente solo muestra el mensaje resultante.</p>
<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"></span>
<span class="line"><span style="color:#F97583"> return</span><span style="color:#E1E4E8"> (</span></span>
<span class="line"><span style="color:#E1E4E8">      &#x3C;</span><span style="color:#B392F0">div</span><span style="color:#E1E4E8">></span></span>
<span class="line"><span style="color:#E1E4E8">        &#x3C;</span><span style="color:#B392F0">button</span><span style="color:#E1E4E8">></span></span>
<span class="line"><span style="color:#E1E4E8">        {</span></span>
<span class="line"><span style="color:#FFAB70">          status</span><span style="color:#E1E4E8"> === "</span><span style="color:#FFAB70">idle</span><span style="color:#E1E4E8">" ? </span><span style="color:#9ECBFF">"Iniciar"</span><span style="color:#E1E4E8">:</span></span>
<span class="line"><span style="color:#FFAB70">          status</span><span style="color:#E1E4E8"> === </span><span style="color:#9ECBFF">"pending"</span><span style="color:#E1E4E8"> ? &#x3C;</span><span style="color:#FFAB70">FaSpinner</span><span style="color:#FFAB70"> className</span><span style="color:#F97583">=</span><span style="color:#9ECBFF">"text-white animate-spin text-2xl"</span><span style="color:#F97583"> /></span><span style="color:#E1E4E8">:</span></span>
<span class="line"><span style="color:#FFAB70">          status</span><span style="color:#E1E4E8"> === </span><span style="color:#9ECBFF">"error"</span><span style="color:#E1E4E8"> ? </span><span style="color:#FFAB70">error</span><span style="color:#E1E4E8">.</span><span style="color:#FFAB70">message</span><span style="color:#E1E4E8"> : </span><span style="color:#9ECBFF">"Correcto"</span></span>
<span class="line"><span style="color:#E1E4E8">        }</span></span>
<span class="line"><span style="color:#F97583">        &#x3C;</span><span style="color:#E1E4E8">button</span><span style="color:#F97583">/></span></span>
<span class="line"><span style="color:#F97583">      &#x3C;/</span><span style="color:#E1E4E8">div</span><span style="color:#F97583">></span></span>
<span class="line"><span style="color:#E1E4E8">    )</span></span>
<span class="line"></span></code></pre>
<p>Y así, combinando React, TanStack Query y Axios con HTTP Sentinel obtenemos un flujo de trabajo robusto y coherente para todas nuestras peticiones: centralizamos el mapeo de códigos HTTP a excepciones, unificamos la detección y el tratamiento de errores, y mantenemos el componente enfocado solo en la presentación y la navegación. El resultado es un código más limpio, fácil de mantener y probar, con mensajes de error claros y consistentes y una experiencia de usuario mucho más fiable.</p>
<h3 id="6-métricas-de-rendimiento">6. Métricas de rendimiento</h3>








































<table><thead><tr><th>Métrica</th><th>Valor</th><th>Descripción</th></tr></thead><tbody><tr><td><strong>Bundle size (minified)</strong></td><td>5.4 kB</td><td>Tamaño de la librería minificada</td></tr><tr><td><strong>Bundle size (gzipped)</strong></td><td>1.7 kB</td><td>Tamaño comprimido que se transfiere por red</td></tr><tr><td><strong>Tiempo de descarga (3G lenta)</strong></td><td>35 ms</td><td>Tiempo de descarga en conexiones lentas</td></tr><tr><td><strong>Tiempo de descarga (4G emergente)</strong></td><td>2 ms</td><td>Tiempo de descarga en conexiones modernas</td></tr><tr><td><strong>Dependencias</strong></td><td>0</td><td>Sin dependencias externas</td></tr><tr><td><strong>Tree-shaking</strong></td><td>✅ Soportado</td><td>Importa solo lo que necesitas</td></tr></tbody></table>
<p><em>Datos obtenidos de <a href="https://bundlephobia.com/package/http-sentinel@1.0.11">Bundlephobia</a></em></p>
<p>Estos números demuestran que HTTP Sentinel es una solución extremadamente eficiente: el tamaño gzipped de solo 1.7 kB significa que agregar manejo robusto de errores HTTP a tu aplicación tiene un costo prácticamente imperceptible en términos de rendimiento.</p>
<hr>
<p>Espero que este artículo les resulte interesante y les sea de gran utilidad en sus futuros proyectos. Pueden consultar el repositorio oficial de <strong>HTTP Sentinel</strong> en GitHub:</p>
<p>🚀<a href="https://github.com/JorgeRosbel/http-sentinel">https://github.com/JorgeRosbel/http-sentinel</a></p>
<p>Se agradece cualquier comentario o contribución. No duden en darle ⭐ al repositorio si les ha resultado útil o ha facilitado su proceso de desarrollo.</p>
<p>Muchas gracias por llegar hasta aquí</p>`, { headings: 133, localImagePaths: 157, remoteImagePaths: 158, frontmatter: 159, imagePaths: 162 }, [134, 135, 138, 141, 144, 147, 151, 154], { depth: 29, slug: 117, text: 120 }, { depth: 75, slug: 136, text: 137 }, "1-motivación-y-contexto", "1. Motivación y contexto", { depth: 75, slug: 139, text: 140 }, "2-principales-características-de-http-sentinel", "2. Principales características de HTTP Sentinel", { depth: 75, slug: 142, text: 143 }, "3-instalación-rápida", "3. Instalación rápida", { depth: 75, slug: 145, text: 146 }, "4-primeros-pasos-detectando-y-lanzado-error", "4. Primeros pasos: detectando y lanzado error", { depth: 148, slug: 149, text: 150 }, 4, "ejemplo-de-petición-y-manejo-de-errores", "Ejemplo de petición y manejo de errores", { depth: 75, slug: 152, text: 153 }, "5-integración-con-react-uso-conjunto-de-axios-tanstack-query-y-http-sentinel", "5. Integración con React: uso conjunto de Axios, TanStack Query y HTTP Sentinel", { depth: 32, slug: 155, text: 156 }, "6-métricas-de-rendimiento", "6. Métricas de rendimiento", [], [], { title: 120, pubDate: 160, tags: 161, description: 121 }, "Aug 3 2025", [124, 125, 126], []];

export { _astro_dataLayerContent as default };
